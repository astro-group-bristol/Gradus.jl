_calculate_transfer_function(r‚Çë, g, g‚ú∂, J) = @. (1 / (œÄ * r‚Çë)) * g * ‚àö(g‚ú∂ * (1 - g‚ú∂)) * J

function _adjust_extrema!(g::AbstractArray{T}) where {T}
    g[1] = zero(T)
    g[end] = one(T)
end

function _make_sorted_with_adjustments!(g1, f1, t1, g2, f2, t2; H = 1e-6)
    I1 = sortperm(g1)
    I2 = sortperm(g2)

    # sort all in ascending g
    g1 .= g1[I1]
    g2 .= g2[I2]
    f1 .= f1[I1]
    f2 .= f2[I2]
    t1 .= t1[I1]
    t2 .= t2[I2]

    # at low inclination angles, the range of g is so tight that the edges are
    # very problematic due to the g‚ú∂ * (1 - g‚ú∂) terms, sending the branches to zero
    # so we use an offset to avoid these that is small enough to not impact results at
    # high inclination angles
    J1 = @. (g1 < 1 - H) & (g1 > H)
    J2 = @. (g2 < 1 - H) & (g2 > H)
    g1 = g1[J1]
    g2 = g2[J2]
    f1 = f1[J1]
    f2 = f2[J2]
    t1 = t1[J1]
    t2 = t2[J2]

    _adjust_extrema!(g1)
    _adjust_extrema!(g2)
    g1, f1, t1, g2, f2, t2
end

function splitbranches(ctf::CunninghamTransferData{T}) where {T}
    # first things first we want to pull out the extremal
    # as these values are mutual to both branches, and cap off the
    # extrema. this way we avoid any accidental linear extrapolation
    # which might occur if N is small

    _, imin = findmin(ctf.g‚ú∂)
    _, imax = findmax(ctf.g‚ú∂)
    i1, i2 = imax > imin ? (imin, imax) : (imax, imin)

    if (i1 == i2)
        error("Resolved same min/max for r‚Çë = $(ctf.r‚Çë)")
    end

    # branch sizes, with duplicate extrema
    N1 = i2 - i1 + 1
    N2 = length(ctf.f) - N1 + 2
    # allocate branches
    branch1_f = zeros(T, N1)
    branch2_f = zeros(T, N2)
    branch1_t = zeros(T, N1)
    branch2_t = zeros(T, N2)
    branch1_g‚ú∂ = zeros(T, N1)
    branch2_g‚ú∂ = zeros(T, N2)

    for (i, j) in enumerate(i1:i2)
        branch1_f[i] = ctf.f[j]
        branch1_g‚ú∂[i] = ctf.g‚ú∂[j]
        branch1_t[i] = ctf.t[j]
    end
    for (i, j) in enumerate(Iterators.flatten((1:i1, i2:length(ctf.f))))
        branch2_f[i] = ctf.f[j]
        branch2_g‚ú∂[i] = ctf.g‚ú∂[j]
        branch2_t[i] = ctf.t[j]
    end

    #¬†determine which is the upper branch
    # return:  (lower_g‚ú∂, lower_f, upper_g‚ú∂, upper_f)
    if branch1_f[2] > branch1_f[1]
        branch2_g‚ú∂, branch2_f, branch2_t, branch1_g‚ú∂, branch1_f, branch1_t
    else
        branch1_g‚ú∂, branch1_f, branch1_t, branch2_g‚ú∂, branch2_f, branch2_t
    end
end

function interpolate_branches(ctf::CunninghamTransferData{T}) where {T}
    (lower_g‚ú∂, lower_f, lower_t, upper_g‚ú∂, upper_f, upper_t) = splitbranches(ctf)
    (lower_g‚ú∂, lower_f, lower_t, upper_g‚ú∂, upper_f, upper_t) =
        _make_sorted_with_adjustments!(
            lower_g‚ú∂,
            lower_f,
            lower_t,
            upper_g‚ú∂,
            upper_f,
            upper_t,
        )
    lower_branch = _make_interpolation(lower_g‚ú∂, lower_f)
    lower_time_branch = _make_interpolation(lower_g‚ú∂, lower_t)
    upper_branch = _make_interpolation(upper_g‚ú∂, upper_f)
    upper_time_branch = _make_interpolation(upper_g‚ú∂, upper_t)
    TransferBranches(
        upper_branch,
        lower_branch,
        upper_time_branch,
        lower_time_branch,
        ctf.gmin,
        ctf.gmax,
        ctf.r‚Çë,
    )
end

function _rear_workhorse(
    m::AbstractMetric,
    x,
    d::AbstractAccretionDisc,
    r‚Çë;
    max_time = 2 * x[2],
    redshift_pf = ConstPointFunctions.redshift(m, x),
    offset_max = 0.4r‚Çë + 10,
    zero_atol = 1e-7,
    Œ≤‚ÇÄ = 0,
    Œ±‚ÇÄ = 0,
    tracer_kwargs...,
)
    function _workhorse(Œ∏)
        r, gp = find_offset_for_radius(
            m,
            x,
            d,
            r‚Çë,
            Œ∏;
            zero_atol = zero_atol,
            offset_max = offset_max,
            max_time = max_time,
            Œ≤‚ÇÄ = Œ≤‚ÇÄ,
            Œ±‚ÇÄ = Œ±‚ÇÄ,
            tracer_kwargs...,
        )
        if isnan(r)
            error(
                "Transfer function integration failed (r‚Çë=$r‚Çë, Œ∏=$Œ∏, offset_max = $offset_max).",
            )
        end
        Œ± = r * cos(Œ∏) + Œ±‚ÇÄ
        Œ≤ = r * sin(Œ∏) + Œ≤‚ÇÄ
        # use underscores to avoid possible boxing
        _g = redshift_pf(m, gp, max_time)
        _J = jacobian_‚àÇŒ±Œ≤_‚àÇgr(
            m,
            x,
            d,
            Œ±,
            Œ≤,
            max_time;
            redshift_pf = redshift_pf,
            tracer_kwargs...,
        )
        (_g, _J, gp.x[1])
    end
end

function _rear_workhorse(m::AbstractMetric, x, d::AbstractThickAccretionDisc, r‚Çë; kwargs...)
    plane = datumplane(d, r‚Çë)
    datum_workhorse = _rear_workhorse(m, x, plane, r‚Çë; kwargs...)
    function _thick_workhorse(Œ∏)
        vals = datum_workhorse(Œ∏)
        (vals...,)
    end
end

function _cunningham_transfer_function!(
    data::_TransferDataAccumulator,
    workhorse,
    Œ∏iterator,
    Œ∏_offset,
    r‚Çë,
)
    for (i, Œ∏) in enumerate(Œ∏iterator)
        Œ∏_corrected = Œ∏ + 1e-4
        insert_data!(data, i, Œ∏_corrected, workhorse(Œ∏)...)
    end

    gmin_candidate, gmax_candidate = _search_extremal!(data, workhorse, Œ∏_offset)
    gmin, gmax = _check_gmin_gmax(gmin_candidate, gmax_candidate, r‚Çë, data.gs)
    # we might not have used all of the memory we allocated so let's clean up
    remove_unused_elements!(data)
    # sort everything by angle
    sort!(data)

    # convert from ‚àÇg to ‚àÇg‚ú∂
    @. data.Js = (gmax - gmin) * data.Js

    @inbounds for i in eachindex(data)
        g‚ú∂ = g_to_g‚ú∂(data.gs[i], gmin, gmax)
        # Js is now storing f
        data.Js[i] = _calculate_transfer_function(r‚Çë, data.gs[i], g‚ú∂, data.Js[i])
        # gs is now storing g‚ú∂
        data.gs[i] = g‚ú∂
    end

    gmin, gmax
end

function cunningham_transfer_function(
    m::AbstractMetric{Q},
    x,
    d::AbstractAccretionDisc,
    r‚Çë::T;
    Œ∏_offset = Q(0.6),
    N = 80,
    N_extrema = 17,
    kwargs...,
) where {Q,T}
    M = N + 2 * N_extrema
    K = N √∑ 5
    data = _TransferDataAccumulator(T, M, N)
    # sample so that the expected minima and maxima (0 and œÄ)
    Œ∏iterator = Iterators.flatten((
        range(0 - 2Œ∏_offset, 0 + 2Œ∏_offset, K),
        range(-œÄ / 2, 3œÄ / 2, N - 2 * K),
        range(œÄ - 2Œ∏_offset, œÄ + 2Œ∏_offset, K),
    ))
    workhorse = _rear_workhorse(m, x, d, r‚Çë; kwargs...)
    gmin, gmax = _cunningham_transfer_function!(data, workhorse, Œ∏iterator, Œ∏_offset, r‚Çë)
    CunninghamTransferData(
        data.data[2, :],
        data.data[3, :],
        data.data[4, :],
        gmin,
        gmax,
        r‚Çë,
    )
end

# find gmin and gmax via GoldenSection
# storing all attempts in gs and Js
function _search_extremal!(data::_TransferDataAccumulator, workhorse, offset)
    # need to specify the type to avoid boxing
    i::Int = data.cutoff
    N = (lastindex(data) - data.cutoff) √∑ 2 - 1

    function _gmin_finder(Œ∏)
        if i >= lastindex(data)
            error("i >= lastindex(data): $i >= $(lastindex(data))")
        end
        i += 1
        if abs(Œ∏) < 1e-4 || abs(abs(Œ∏) - œÄ) < 1e-4
            Œ∏ += 1e-4
        end
        insert_data!(data, i, Œ∏, workhorse(Œ∏)...)
        data.gs[i]
    end
    function _gmax_finder(Œ∏)
        -_gmin_finder(Œ∏)
    end

    # stride either side of our best guess so far
    res_min = Optim.optimize(
        _gmin_finder,
        0 - offset,
        0 + offset,
        GoldenSection(),
        iterations = N,
    )
    res_max = Optim.optimize(
        _gmax_finder,
        œÄ - offset,
        œÄ + offset,
        GoldenSection(),
        iterations = N,
    )

    # unpack result, remembering that maximum is inverted
    Optim.minimum(res_min), -Optim.minimum(res_max)
end

function interpolated_transfer_branches(
    m::AbstractMetric{T},
    x,
    d,
    radii;
    verbose = false,
    kwargs...,
) where {T}
    progress_bar = init_progress_bar("Transfer functions:", length(radii), verbose)
    # IILF for calculating the interpolated branches
    ùîâ =
        r‚Çë -> begin
            # want to scale the initial position with radius
            # since redshift / jacobian values calculated at large impact parameters
            # seem to be inaccurate? either that or the root finder is up to something
            # but the problems seem to disappear by just keeping everything at low impact
            x_prob = SVector{4}(x[1], x[2], x[3], x[4])
            ctf = cunningham_transfer_function(
                m,
                x_prob,
                d,
                r‚Çë,
                ;
                chart = chart_for_metric(m, 10 * x_prob[2]),
                max_time = 10 * x_prob[2],
                kwargs...,
            )
            itp = interpolate_branches(ctf)
            ProgressMeter.next!(progress_bar)
            itp
        end

    # calculate interpolated transfer functions for each emission radius
    InterpolatingTransferBranches(_threaded_map(ùîâ, radii))
end

export CunninghamTransferData,
    TransferBranches,
    InterpolatingTransferBranches,
    splitbranches,
    interpolate_branches,
    cunningham_transfer_function
